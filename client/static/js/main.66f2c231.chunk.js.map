{"version":3,"sources":["container/Container.module.css","words/Words.module.css","square/Square.module.css","timer/Timer.module.css","search/Search.module.css","square/Square.js","board/Board.js","timer/Timer.js","search/Search.js","counter/Counter.js","words/Words.js","controllers/Search.js","config.js","container/Container.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Square","props","data","background","character","className","cssModule","square","style","Board","map","subarr","i","squares","elem","j","key","selected","css","selectedBg","getBoard","Timer","state","time","intervalId","constants","maxTime","secInMin","start","bind","update","stop","this","setInterval","setState","prevState","clearInterval","hours","Math","floor","minutes","height","display","type","onClick","startBtn","Component","Search","name","onKeyDown","search","placeholder","Counter","padding","fontSize","count","Words","container","item","index","SearchController","n","graph","generateGraph","Array","from","keys","getNeighbors","row","col","total","m","filter","d","ch","filteredData","length","push","fullString","coordinate","coordinateHistory","coordinateStr","split","parseInt","string","found","finalNode","queue","getCoordinates","neighbourCoordinates","neighboursInfo","formatCoordinate","x","y","nextChar","includes","coords","node","searchResult","config","Container","size","validWords","searchController","changeState","generateData","getRandomCharacter","random","event","target","value","word","valid","alert","arr","element","persist","keyCode","toUpperCase","validateWord","url","fetch","then","json","isTrue","resetInputBox","timer","innerContainer","paddingLeft","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.66f2c231.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__1-PWt\",\"timer\":\"Container_timer__3syB6\",\"innerContainer\":\"Container_innerContainer__1DQMD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Words_container__1znSk\",\"item\":\"Words_item__lQQ9n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"square\":\"Square_square__33-ST\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"startBtn\":\"Timer_startBtn__DAI7S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input-box\":\"Search_input-box__k3Wag\"};","import React from \"react\"\nimport cssModule from \"./Square.module.css\"\n\nfunction Square(props) {\n    const {background, character} = props.data\n    return (\n        <div className={cssModule.square+\" col-sm\"} style={{background: background}}>\n            {character}\n        </div>\n    )\n}\n\nexport default Square\n","import React from \"react\"\nimport Square from \"../square/Square\"\n\nfunction getBoard(props){\n    return props.data.map((subarr, i) => {\n        let squares = subarr.map((elem, j) =>\n            <Square\n                key={`${i}-${j}`}\n                data={{ character: elem.character, background: elem.selected ? props.css.selectedBg : props.css.background }}\n            />)\n\n        return <div className=\"row\" key={i}>{squares}</div>\n    })\n}\n\nfunction Board(props){\n    return (\n        <div className=\"container\">\n            {getBoard(props)}\n        </div>\n    )\n}\n\nexport default Board","import React, { Component } from \"react\"\nimport cssModule from \"./Timer.module.css\"\n\nclass Timer extends Component {\n    constructor() {\n        super();\n        this.state = {\n            time: 0,\n            intervalId: null,\n            constants: {\n                maxTime: 120, // maximum time in seconds timer will run\n                secInMin: 60  // 1 min = 60 sec\n            }\n        }\n\n        this.start = this.start.bind(this)\n        this.update = this.update.bind(this)\n        this.stop = this.stop.bind(this)\n    }\n\n    start() {\n        this.props.start();\n        let intervalId = setInterval(this.update, 1000)\n        this.setState({\n            intervalId: intervalId\n        })\n    }\n\n    update() {\n        if (this.state.time >= this.state.constants.maxTime) {\n            this.stop();\n            return;\n        }\n\n        this.setState((prevState) => {\n            return {\n                time: prevState.time + 1\n            }\n        })\n    }\n\n    stop() {\n        this.props.stop();\n        this.setState((prevState) => {\n            clearInterval(prevState.intervalId)\n            return {\n                time: 0,\n                intervalId: null\n            }\n        })\n    }\n\n    render() {\n        const hours = Math.floor((this.state.constants.maxTime-this.state.time) / this.state.constants.secInMin)\n        const minutes = (this.state.constants.maxTime-this.state.time) % this.state.constants.secInMin\n\n        return (\n            <div style={{height: 70}}>\n                {this.state.time > 0? <h2>{hours}:{minutes}</h2>: \"\"}\n                {this.props.display? <button type=\"button\" onClick={this.start} className={cssModule.startBtn}>Start</button>: \"\"}\n            </div>\n        )\n    }\n}\n\nexport default Timer\n","import React from \"react\"\nimport cssModule from \"./Search.module.css\"\n\nfunction Search(props) {\n    return (\n        <div className={cssModule['input-box']}>\n            <input type=\"text\" name=\"searchWord\" onKeyDown={props.search} placeholder=\"Enter words...\"/>\n        </div>\n    )\n}\n\nexport default Search\n","import React from \"react\"\n\nfunction Counter(props) {\n    return (\n        <div style={{padding: 15}}>\n            <span>Score:</span>&nbsp;<strong style={{fontSize: 24}}>{props.count}</strong>\n        </div>        \n    )\n}\n\nexport default Counter","import React from \"react\"\nimport cssModule from \"./Words.module.css\"\n\nfunction getWords(items) {\n    return items.map((item,index) => <li className={cssModule.item} key={index}>{item}</li>)\n}\n\nfunction Words(props) {\n\n    return (\n        <div className={cssModule.container} >\n            <h2>Searched Words</h2>\n            <ul>\n                {getWords(props.data)}\n            </ul>\n        </div>\n    )\n}\n\nexport default Words\n","export class SearchController {\n    constructor(n) {\n        this.graph = this.generateGraph(n)\n    }\n\n    /**\n     * Generate graph where n is number of row and column in board \n     * sample look in `GraphData.js`\n     * @param {*} n \n     */\n    generateGraph(n) {\n        let graph = {}\n        Array.from(Array(n).keys()).map((i) => {\n            return Array.from(Array(n).keys()).map((j) => {\n                graph[`${i}${j}`] = this.getNeighbors(i, j, n)\n            })\n        })\n        return graph\n    }\n    \n    getNeighbors(row, col, total) {\n        const neighbourMatrix = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]];\n        return neighbourMatrix.map((m) => [m[0] + row, m[1] + col]).filter((item) => (((item[0] > -1) && (item[0] < total)) && ((item[1] > -1) && (item[1] < total)))).map((d) => `${d[0]}${d[1]}`)\n    }\n\n    getCoordinates(ch, state) {\n        let filteredData = []\n        for (let i = 0; i < state.data.length; i++) {\n            for (let j = 0; j < state.data[i].length; j++) {\n                if (state.data[i][j].character === ch) {\n                    filteredData.push(`${i}${j}`)\n                }\n            }\n        }\n\n        return filteredData.map((d) => {\n            return {\n                character: ch,\n                fullString: ch,\n                coordinate: d,\n                coordinateHistory: [d]\n            }\n        })\n    }\n\n    formatCoordinate(coordinateStr) {\n        return coordinateStr.split(\"\").map(d => parseInt(d))\n    }\n\n    /**\n     * Initially put first character info in queue and \n     * scans all the neighbors of queue[i] and check if next character i.e\n     * string[i+1] is present in any nodes and also ensure the node is not \n     * repeated by checking its coordinate history.\n     * If satisfied then add to queue and continue until cursor reaches queue end \n     * or found searched string.\n     */\n    search(string, state) {\n        let i = 0\n        let found = false\n        let finalNode = null\n        let queue = this.getCoordinates(string[0], state)\n        \n        while (i < queue.length) {\n            let neighbourCoordinates = this.graph[queue[i].coordinate]\n            if (neighbourCoordinates.length) {\n                let neighboursInfo = neighbourCoordinates.filter((coordinate) => {\n                    let [x, y] = this.formatCoordinate(coordinate)\n                    let character = state.data[x][y].character\n                    let nextChar = string[(queue[i].coordinateHistory).length]\n                    return (!(queue[i].coordinateHistory.includes(coordinate))) && (character === nextChar)\n                }).map(coordinate => {\n                    let [x, y] = this.formatCoordinate(coordinate)\n                    let coords = [...queue[i].coordinateHistory, coordinate]\n                    let fullString = queue[i].fullString + state.data[x][y].character\n                    return {\n                        character: state.data[x][y].character,\n                        coordinate: coordinate,\n                        fullString: fullString,\n                        coordinateHistory: coords\n                    }\n                })\n\n                queue.push(...neighboursInfo)\n\n                for (let node of neighboursInfo) {\n                    if (node.fullString === string) {\n                        found = true\n                        finalNode = node\n                    }\n                }            \n            }\n\n            if(found){break}\n            ++i\n        }\n\n\n        let searchResult = {\n            coordinateHistory: [],\n            string: string,\n            found: false\n        }\n        if (found) {\n            searchResult = {\n                coordinateHistory: finalNode.coordinateHistory,\n                string: finalNode.fullString,\n                found: true\n            }\n        }\n        \n        return searchResult\n    }\n}","export const config = {\n    protocol: \"http\",\n    host: \"localhost\",\n    port: \"3000\",\n    baseUrl: \"\"\n}","import React, {Component} from \"react\"\nimport Board from \"../board/Board\"\nimport Timer from \"../timer/Timer\"\nimport Search from \"../search/Search\"\nimport Counter from \"../counter/Counter\"\nimport Words from \"../words/Words\"\nimport { SearchController } from \"../controllers/Search\"\nimport { config } from \"../config\"\nimport cssModule from \"./Container.module.css\"\n\nclass Container extends Component{\n    constructor(){\n        super()\n        this.state = {\n            start: false,\n            size: 6,\n            count: 0,\n            data: [],\n            validWords: [],\n            css: {\n                selectedBg: \"#287328\",\n                background: \"#4CAF50\"\n            },\n            searchController: null\n        }\n\n        this.search = this.search.bind(this)\n        this.changeState = this.changeState.bind(this)\n    }\n\n    componentDidMount(){\n        this.setState((prevState) => {\n            return {\n                searchController: new SearchController(prevState.size)\n            }\n        })\n    }\n\n    start() {\n        this.setState((prevState)=> {\n            return{\n                start: true,\n                count: 0,\n                validWords: [],\n                data: this.generateData(prevState.size)\n            }\n        })\n    }\n\n    stop() {\n        this.setState({\n            start: false\n        })\n    }\n\n    generateData(n) {\n        return Array.from(Array(n).keys()).map(() => {\n            return Array.from(Array(n).keys()).map(() => {\n                return {\n                    character: this.getRandomCharacter(),\n                    selected: false\n                }\n            })\n        })\n    }\n\n    getRandomCharacter() {\n        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        const index = Math.floor(Math.random() * 26)\n        return letters[index]\n    }\n\n    resetInputBox(event) {\n        event.target.value = \"\"\n    }\n\n    validateWord(word) {\n        let valid = true\n        if (word.length < 2) {\n            alert(\"Please enter word of at least 2 characters\");\n            valid = false\n        }\n        if (this.state.validWords.includes(word)) {\n            alert(\"Already added in list\")\n            valid = false\n        }\n        return valid\n    }\n\n    changeState(searchResult, word){\n        this.setState((prevState) => {\n            const data = prevState.data.map((arr, i) => {\n                return arr.map((element, j) => {\n                    element.selected = searchResult.coordinateHistory.includes(`${i}${j}`) ? true : false\n                    return element\n                })\n            })\n            const validWords = [...prevState.validWords, word]\n            const count = prevState.count + word.length\n\n            return {\n                count: count,\n                data: data,\n                validWords: validWords\n            }\n        })\n    }\n\n    search(event) {\n        event.persist();\n        if (event.keyCode === 13) {\n            let word = event.target.value.toUpperCase()\n            const validate = this.validateWord(word)\n            if (!validate) { return }\n\n            const searchResult = this.state.searchController.search(word, this.state)\n\n            if (searchResult.found) {\n                const url = `${config.protocol}://${config.host}:${config.port}/dictionary/${word}`\n                fetch(url)\n                    .then(data => data.json())\n                    .then(data => {\n                        if (data.isTrue) {\n                            this.resetInputBox(event)\n                            this.changeState(searchResult, word)\n                        }\n                    })\n            }\n        }\n    }\n\n    render(){\n        return(\n            <div className={cssModule.container}>\n                <div className={cssModule.timer}>\n                    <Timer display={!this.state.start} start={() => this.start()} stop={() => this.stop()}/>\n                </div>\n                <div className={cssModule.innerContainer}>\n                    <div style={{paddingLeft: 100}}>\n                        <Board data={this.state.data} css={this.state.css}/>\n                        {this.state.start?<Search search={this.search}/>: \"\"}\n                    </div>\n                    <div style={{paddingLeft: 50}}>\n                        {this.state.count?<Counter count={this.state.count}/>: \"\"}\n                        {this.state.validWords.length?<Words data={this.state.validWords} />: \"\"}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Container\n","import React, { Component } from \"react\"\nimport Container from \"./container/Container\"\nimport './App.css';\n\nclass App extends Component{\n    constructor(){\n        super();\n    }\n\n    render(){\n        return(\n            <Container />\n        )\n    }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}